1. Бизнес-процесс создания заказа

Для описания бизнес-процесса создания заказа в мобильном приложении "Частная пекарня" можно использовать нотацию BPMN (Business Process Model and Notation).

Диаграмма бизнес-процесса создания заказа

[Пользователь] --> [Выбор товара] --> [Добавление в корзину] --> [Просмотр корзины]
[Просмотр корзины] --> [Создание заказа] --> [Оплата заказа] --> [Подтверждение заказа]


2. Процесс синхронизации данных между клиентом и сервером

▎Описание процессов

========================= диаграмма.png =========================

 ==         Оплата заказа:

  - Клиент отправляет данные для оплаты.

  - Сервер обрабатывает платеж и обновляет статус заказа.

  - Заказ появляется в профиле

 ==     API методы

POST /orders         новый заказ
PUT /orders/{id}     изменение заказа
DELETE /orders/{id}  отмена 
PUT /users/{id}      изменение данных пользователя
POST /payment        для оплаты


       UML диаграмма взаимодействия

====================          =======================       =======================
|    Пользователь  |          |       Сервер        |       |     База данных     |
====================          =======================       =======================
|                  |          |                     |       |                     |
| 1. Выбор товара  |--------->|                     |       |                     |
|                  |          |                     |       |                     |
| 2. Создание      |--------->|   Создать заказ     |       |                     |
|    заказа        |          |                     |       |                     |
|                  |<---------|   Возврат ID заказа |       |                     |
|                  |          |                     |       |                     |
| 3. Оплата        |--------->|   Обработать оплату |       |                     |
|                  |<---------|   Подтверждение     |       |                     |
====================          =======================       =======================


▎ER-диаграмма сущностей




 User: userId, name, email, phone

 Order: orderId, userId, orderDate, status

 OrderItem: orderItemId, orderId, productId, quantity

 Product: productId, name, price, description

    3. Прототип экрана создания заказа

Интерфейс приложения.png  (извините поздно вспомнил про графику)


Используемые API методы

- PUT /orders/{id} — для обновления информации о заказе.

▎Передаваемые параметры

{
  "order_id": "123",
  "products": [
    {
      "product_id": "456",
      "quantity": 2
    },
    {
      "product_id": "789",
      "quantity": 1
    }
  ]
}


Процесс хранения информации о покупках пользователя

Информация о покупках хранится в таблице Покупка, которая связывает Покупатель и Товар. Каждая запись содержит дату покупки и идентификаторы покупателя и товара.



 SQL-запросы

1. Вывести покупателей с количеством осуществленных покупок:

SELECT
c.id AS customer_id,
c.firstname || ' ' || c.lastname AS customer_name,
COUNT(p.id) AS purchase_count
FROM
customers c
LEFT JOIN
purchases p ON c.id = p.customerid
GROUP BY
c.id, c.firstname, c.lastname
ORDER BY
purchase_count DESC;

2.Общая стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания:

SELECT
c.id AS customer_id,
c.firstname || ' ' || c.lastname AS customer_name,
COALESCE(SUM(pr.price), 0) AS total_spent
FROM
customers c
LEFT JOIN
purchases p ON c.id = p.customerid
LEFT JOIN
products pr ON p.productid = pr.id
GROUP BY
c.id, c.firstname, c.lastname
ORDER BY
total_spent DESC;